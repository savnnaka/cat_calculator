[{"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/index.js":"1","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/reportWebVitals.js":"2","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/App.jsx":"3","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/logic/calculation.js":"4","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/Results.jsx":"5","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/Layout.jsx":"6","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/ExpressionInput.jsx":"7","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/index.js":"8","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/reportWebVitals.js":"9","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/App.jsx":"10","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/logic/calculation.js":"11","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/Layout.jsx":"12","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/ExpressionInput.jsx":"13","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/Results.jsx":"14"},{"size":482,"mtime":1688229985924,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1688229985924,"results":"17","hashOfConfig":"16"},{"size":1268,"mtime":1688318901230,"results":"18","hashOfConfig":"16"},{"size":7928,"mtime":1688319221274,"results":"19","hashOfConfig":"16"},{"size":948,"mtime":1688317504668,"results":"20","hashOfConfig":"16"},{"size":2044,"mtime":1688229985924,"results":"21","hashOfConfig":"16"},{"size":1196,"mtime":1688304666615,"results":"22","hashOfConfig":"16"},{"size":482,"mtime":1688229985924,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1688229985924,"results":"25","hashOfConfig":"24"},{"size":1268,"mtime":1688318901230,"results":"26","hashOfConfig":"24"},{"size":7928,"mtime":1688319221274,"results":"27","hashOfConfig":"24"},{"size":1762,"mtime":1691922356046,"results":"28","hashOfConfig":"24"},{"size":1196,"mtime":1688304666615,"results":"29","hashOfConfig":"24"},{"size":948,"mtime":1688317504668,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"46a672",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pz404w",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/index.js",[],["62","63"],"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/reportWebVitals.js",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/App.jsx",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/logic/calculation.js",["64","65","66","67","68","69","70","71","72","73","74"],"export default class Calculation {\n    constructor(expression) {\n        this.expression = expression;\n    }\n\n    /**\n     * validate expression string against regex expression\n     * (only based on characters: digits, *,+,/,-)\n     * @returns bool\n     */\n    validateInput_basic() {\n        const validExpression = /^[0-9.+\\-*/\\s]+$/; // Regular expression to match valid characters\n        console.log(\"expression is \"+ this.expression);\n        return validExpression.test(this.expression);\n    }\n\n    /**\n     * basic evaluation of expression (only based on characters: digits, *,+,/,-)\n     * @returns {float} (result) // string\n     */\n    evaluate_basic() {\n        if(!this.validateInput_basic()) return undefined;\n\n        // split into array\n        const splitExpression = this.expression.match(/(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-)/g);\n        const expressionString = splitExpression.join(\" \")\n\n        // Punkt vor Strich\n        // find all * or /, evaluate from left to right\n        let isError = false;\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"*\" || element === \"/\") {\n                // take neighbours of operator\n                const a = parseFloat(splitExpression[index - 1]);\n                const b = parseFloat(splitExpression[index + 1]);\n            \n                if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                    isError = true;\n                    break;\n                }\n            \n                let result = this.performOperation(element, a, b);\n            \n                splitExpression.splice(index - 1, 3, result.toString());\n                index -= 2; // adjust index, as b is already processed\n            }\n        }\n        \n        // find all + or -, evaluate from left to right\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"+\" || element === \"-\") {\n                const a = parseFloat(splitExpression[index - 1]);\n                const b = parseFloat(splitExpression[index + 1]);\n        \n                if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                    isError = true;\n                    break;\n                }\n            \n                let result = this.performOperation(element, a, b);\n            \n                splitExpression.splice(index - 1, 3, result.toString());\n                index -= 2; // adjust index, as b is already processed\n            }\n      }\n    \n      if (isError) return undefined;\n      return expressionString + \" = \" + parseFloat(splitExpression[0]);\n    }\n\n    /**\n     * validate expression string against regex expression\n     * (only based on characters: digits, *,+,/,-,(,),^) \n     * @returns {bool}\n     */\n    validateInput_advanced() {\n        const validExpression = /^[0-9.+\\-*/\\(\\)^\\s]+$/; // Regular expression to match valid characters\n        // console.log(\"expression is \"+ this.expression);\n        return validExpression.test(this.expression);\n    }\n\n    /**\n     * converts infix into postfix notation\n     * @param {string} infix \n     * @returns {array} \n     */\n    infixToPostfix(){\n\n        // split string into array\n        const regex = /(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-|\\^|\\(|\\))/g;\n        const splitExpression = this.expression.match(regex);\n\n        if(!splitExpression) return undefined;\n\n        // stack for operators\n        const stack = [];\n        // queue for numbers\n        const queue = [];\n\n        const association = {\n            \"^\" : \"right\",\n            \"*\" : \"left\",\n            \"/\" : \"left\",\n            \"+\" : \"left\",\n            \"-\" : \"left\",\n        };\n\n        var precedence = {\n            \"^\" : 4,\n            \"*\" : 3,\n            \"/\" : 3,\n            \"+\" : 2,\n            \"-\" : 2,\n        };\n\n        splitExpression.forEach(element => {\n            // push all digits on queue\n            if(element.match(/\\d+/)){\n                queue.push(element);\n            }\n            // elseif element is an operator (not a parenthesis)\n            else if(element.match(/[\\+\\*\\-\\/^]/)){\n                // while there's at least one operator on the stack, compare to current operator\n                // to determine the order\n                let top = stack[stack.length - 1];\n                while(top \n                && top.match(/[\\+\\*\\-\\/^]/) // no parenthesis\n                && ((association[element] === \"left\" && precedence[element] === precedence[top])\n                || (precedence[element] < precedence[top]))){\n                    queue.push(stack.pop());\n                    top = stack[stack.length - 1];\n                }\n                stack.push(element);\n            }\n\n            // push left parenthesis it onto the stack.\n            else if(element === \"(\") {\n                stack.push(element);\n            }\n            // element is a right parenthesis:\n            else if(element === \")\") {\n                let top = stack[stack.length - 1];\n                // while the operator at the top of the operator stack is not a left parenthesis\n                while(top && top !== \"(\"){\n                    // pop the operator from the operator stack into the output queue\n                    queue.push(stack.pop());\n                    top = stack[stack.length - 1];\n                }\n                // assert the operator stack is not empty\n                if(!top){\n                    console.log(\"Parentheses mismatch\");\n                    return undefined;\n                }\n                if(top === \"(\"){\n                    stack.pop(); // Discard left parenthesis\n                }\n            }\n        });\n\n        // After the while loop, pop the remaining items from the operator stack into the output queue.\n        while(stack.length !== 0){\n            let top = stack[stack.length - 1];\n            if(top === \"(\" || top === \")\"){\n                console.log(\"Parentheses mismatch\");\n                return undefined;\n            }\n            queue.push(stack.pop());\n        }\n\n        return queue;\n    };\n\n    /**\n     * \n     * @param operator \n     * @param {float} a \n     * @param {float} b \n     * @returns {float} result\n     */\n    performOperation(operator, a, b) {\n        switch (operator) {\n        case '+':\n            return a + b;\n        case '-':\n            return a - b;\n        case '*':\n            return a * b;\n        case '/':\n            return a / b;\n        case '^':\n            return Math.pow(a, b);\n        default:\n            throw new Error('Invalid operator: ' + operator);\n        }\n    }\n\n    evaluatePostfix(postfix) {\n        // return if postfix is undefined\n        if(!postfix) return undefined;\n        // stack for the digits\n        const numbers = [];\n      \n        postfix.forEach(element => {\n            if (!isNaN(parseFloat(element)) && isFinite(element)) {\n              numbers.push(parseFloat(element));\n            } else {\n              let b = numbers.pop();\n              let a = numbers.pop();\n              let result = this.performOperation(element, a, b);\n              numbers.push(result);\n            }\n        });\n      \n        if(isNaN(numbers[0])) return undefined;\n        return numbers[0];\n    }\n\n    /**\n     * @param {string} expression \n     * @returns {string} parsedExpression \n     */\n    parseInput(){\n        // split string into array\n        const regex = /(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-|\\^|\\(|\\))/g;\n        const inputSplitted = this.expression.match(regex);\n        return inputSplitted.join(\" \");\n    }\n\n\n    /**\n     * calls the specified evaluation method\n     * @returns float (result of expression)\n     */\n    calculate() {\n        /**\n         * @TODO Add your implementation here\n         */\n        return this.evaluatePostfix(this.infixToPostfix());\n    }\n}\n","/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/Results.jsx",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/Layout.jsx",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/components/ExpressionInput.jsx",["75","76"],"import { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport const ExpressionInput = ({ handleSubmit }) => {\n\n  const [isInputValid, setIsInputValid] = useState(true);\n\n  const handleInputChange = (event) => {\n    // set is input valid according to it's characters only\n    const validExpression = /^[0-9.+\\-*/\\(\\)^\\s]+$/;\n    setIsInputValid(validExpression.test(event.target.value));\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <TextField \n          fullWidth={true} \n          label=\"Expression\" \n          variant=\"outlined\"\n          error={!isInputValid}\n          id=\"inputValue\" \n          onChange={handleInputChange}\n          />\n      </CardContent>\n      <CardActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => handleSubmit(\n            document.getElementById(\"inputValue\").value\n          )}\n        >\n          Submit\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n","/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/index.js",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/reportWebVitals.js",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/App.jsx",[],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/logic/calculation.js",["77","78","79","80","81","82","83","84","85","86","87"],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/Layout.jsx",["88","89"],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/ExpressionInput.jsx",["90","91"],"/home/karin/Dokumente/Uni/SS23/React/IT Design/cat_calculator/src/components/Results.jsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":25,"column":78,"nodeType":"98","messageId":"99","endLine":25,"endColumn":79,"suggestions":"100"},{"ruleId":"96","severity":1,"message":"101","line":81,"column":45,"nodeType":"98","messageId":"99","endLine":81,"endColumn":46,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"103","line":81,"column":47,"nodeType":"98","messageId":"99","endLine":81,"endColumn":48,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"97","line":94,"column":46,"nodeType":"98","messageId":"99","endLine":94,"endColumn":47,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"106","line":126,"column":37,"nodeType":"98","messageId":"99","endLine":126,"endColumn":38,"suggestions":"107"},{"ruleId":"96","severity":1,"message":"108","line":126,"column":39,"nodeType":"98","messageId":"99","endLine":126,"endColumn":40,"suggestions":"109"},{"ruleId":"96","severity":1,"message":"110","line":126,"column":43,"nodeType":"98","messageId":"99","endLine":126,"endColumn":44,"suggestions":"111"},{"ruleId":"96","severity":1,"message":"106","line":131,"column":32,"nodeType":"98","messageId":"99","endLine":131,"endColumn":33,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"108","line":131,"column":34,"nodeType":"98","messageId":"99","endLine":131,"endColumn":35,"suggestions":"113"},{"ruleId":"96","severity":1,"message":"110","line":131,"column":38,"nodeType":"98","messageId":"99","endLine":131,"endColumn":39,"suggestions":"114"},{"ruleId":"96","severity":1,"message":"97","line":228,"column":46,"nodeType":"98","messageId":"99","endLine":228,"endColumn":47,"suggestions":"115"},{"ruleId":"96","severity":1,"message":"101","line":14,"column":41,"nodeType":"98","messageId":"99","endLine":14,"endColumn":42,"suggestions":"116"},{"ruleId":"96","severity":1,"message":"103","line":14,"column":43,"nodeType":"98","messageId":"99","endLine":14,"endColumn":44,"suggestions":"117"},{"ruleId":"96","severity":1,"message":"97","line":25,"column":78,"nodeType":"98","messageId":"99","endLine":25,"endColumn":79,"suggestions":"118"},{"ruleId":"96","severity":1,"message":"101","line":81,"column":45,"nodeType":"98","messageId":"99","endLine":81,"endColumn":46,"suggestions":"119"},{"ruleId":"96","severity":1,"message":"103","line":81,"column":47,"nodeType":"98","messageId":"99","endLine":81,"endColumn":48,"suggestions":"120"},{"ruleId":"96","severity":1,"message":"97","line":94,"column":46,"nodeType":"98","messageId":"99","endLine":94,"endColumn":47,"suggestions":"121"},{"ruleId":"96","severity":1,"message":"106","line":126,"column":37,"nodeType":"98","messageId":"99","endLine":126,"endColumn":38,"suggestions":"122"},{"ruleId":"96","severity":1,"message":"108","line":126,"column":39,"nodeType":"98","messageId":"99","endLine":126,"endColumn":40,"suggestions":"123"},{"ruleId":"96","severity":1,"message":"110","line":126,"column":43,"nodeType":"98","messageId":"99","endLine":126,"endColumn":44,"suggestions":"124"},{"ruleId":"96","severity":1,"message":"106","line":131,"column":32,"nodeType":"98","messageId":"99","endLine":131,"endColumn":33,"suggestions":"125"},{"ruleId":"96","severity":1,"message":"108","line":131,"column":34,"nodeType":"98","messageId":"99","endLine":131,"endColumn":35,"suggestions":"126"},{"ruleId":"96","severity":1,"message":"110","line":131,"column":38,"nodeType":"98","messageId":"99","endLine":131,"endColumn":39,"suggestions":"127"},{"ruleId":"96","severity":1,"message":"97","line":228,"column":46,"nodeType":"98","messageId":"99","endLine":228,"endColumn":47,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":18},{"ruleId":"129","severity":1,"message":"133","line":7,"column":8,"nodeType":"131","messageId":"132","endLine":7,"endColumn":16},{"ruleId":"96","severity":1,"message":"101","line":14,"column":41,"nodeType":"98","messageId":"99","endLine":14,"endColumn":42,"suggestions":"134"},{"ruleId":"96","severity":1,"message":"103","line":14,"column":43,"nodeType":"98","messageId":"99","endLine":14,"endColumn":44,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["138","139"],"Unnecessary escape character: \\(.",["140","141"],"Unnecessary escape character: \\).",["142","143"],["144","145"],"Unnecessary escape character: \\+.",["146","147"],"Unnecessary escape character: \\*.",["148","149"],"Unnecessary escape character: \\/.",["150","151"],["152","153"],["154","155"],["156","157"],["158","159"],["160","161"],["162","163"],["164","165"],["166","167"],["168","169"],["170","171"],["172","173"],["174","175"],["176","177"],["178","179"],["180","181"],["182","183"],["184","185"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'HelpIcon' is defined but never used.",["186","187"],["188","189"],"no-global-assign","no-unsafe-negation",{"messageId":"190","fix":"191","desc":"192"},{"messageId":"193","fix":"194","desc":"195"},{"messageId":"190","fix":"196","desc":"192"},{"messageId":"193","fix":"197","desc":"195"},{"messageId":"190","fix":"198","desc":"192"},{"messageId":"193","fix":"199","desc":"195"},{"messageId":"190","fix":"200","desc":"192"},{"messageId":"193","fix":"201","desc":"195"},{"messageId":"190","fix":"202","desc":"192"},{"messageId":"193","fix":"203","desc":"195"},{"messageId":"190","fix":"204","desc":"192"},{"messageId":"193","fix":"205","desc":"195"},{"messageId":"190","fix":"206","desc":"192"},{"messageId":"193","fix":"207","desc":"195"},{"messageId":"190","fix":"208","desc":"192"},{"messageId":"193","fix":"209","desc":"195"},{"messageId":"190","fix":"210","desc":"192"},{"messageId":"193","fix":"211","desc":"195"},{"messageId":"190","fix":"212","desc":"192"},{"messageId":"193","fix":"213","desc":"195"},{"messageId":"190","fix":"214","desc":"192"},{"messageId":"193","fix":"215","desc":"195"},{"messageId":"190","fix":"216","desc":"192"},{"messageId":"193","fix":"217","desc":"195"},{"messageId":"190","fix":"218","desc":"192"},{"messageId":"193","fix":"219","desc":"195"},{"messageId":"190","fix":"220","desc":"192"},{"messageId":"193","fix":"221","desc":"195"},{"messageId":"190","fix":"222","desc":"192"},{"messageId":"193","fix":"223","desc":"195"},{"messageId":"190","fix":"224","desc":"192"},{"messageId":"193","fix":"225","desc":"195"},{"messageId":"190","fix":"226","desc":"192"},{"messageId":"193","fix":"227","desc":"195"},{"messageId":"190","fix":"228","desc":"192"},{"messageId":"193","fix":"229","desc":"195"},{"messageId":"190","fix":"230","desc":"192"},{"messageId":"193","fix":"231","desc":"195"},{"messageId":"190","fix":"232","desc":"192"},{"messageId":"193","fix":"233","desc":"195"},{"messageId":"190","fix":"234","desc":"192"},{"messageId":"193","fix":"235","desc":"195"},{"messageId":"190","fix":"236","desc":"192"},{"messageId":"193","fix":"237","desc":"195"},{"messageId":"190","fix":"238","desc":"192"},{"messageId":"193","fix":"239","desc":"195"},{"messageId":"190","fix":"240","desc":"192"},{"messageId":"193","fix":"241","desc":"195"},{"messageId":"190","fix":"242","desc":"192"},{"messageId":"193","fix":"243","desc":"195"},{"messageId":"190","fix":"244","desc":"192"},{"messageId":"193","fix":"245","desc":"195"},"removeEscape",{"range":"246","text":"247"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"248","text":"249"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"250","text":"247"},{"range":"251","text":"249"},{"range":"252","text":"247"},{"range":"253","text":"249"},{"range":"254","text":"247"},{"range":"255","text":"249"},{"range":"256","text":"247"},{"range":"257","text":"249"},{"range":"258","text":"247"},{"range":"259","text":"249"},{"range":"260","text":"247"},{"range":"261","text":"249"},{"range":"262","text":"247"},{"range":"263","text":"249"},{"range":"264","text":"247"},{"range":"265","text":"249"},{"range":"266","text":"247"},{"range":"267","text":"249"},{"range":"268","text":"247"},{"range":"269","text":"249"},{"range":"270","text":"247"},{"range":"271","text":"249"},{"range":"272","text":"247"},{"range":"273","text":"249"},{"range":"274","text":"247"},{"range":"275","text":"249"},{"range":"276","text":"247"},{"range":"277","text":"249"},{"range":"278","text":"247"},{"range":"279","text":"249"},{"range":"280","text":"247"},{"range":"281","text":"249"},{"range":"282","text":"247"},{"range":"283","text":"249"},{"range":"284","text":"247"},{"range":"285","text":"249"},{"range":"286","text":"247"},{"range":"287","text":"249"},{"range":"288","text":"247"},{"range":"289","text":"249"},{"range":"290","text":"247"},{"range":"291","text":"249"},{"range":"292","text":"247"},{"range":"293","text":"249"},{"range":"294","text":"247"},{"range":"295","text":"249"},{"range":"296","text":"247"},{"range":"297","text":"249"},{"range":"298","text":"247"},{"range":"299","text":"249"},[830,831],"",[830,830],"\\",[2967,2968],[2967,2967],[2969,2970],[2969,2969],[3366,3367],[3366,3366],[4198,4199],[4198,4198],[4200,4201],[4200,4200],[4204,4205],[4204,4204],[4461,4462],[4461,4461],[4463,4464],[4463,4463],[4467,4468],[4467,4467],[7542,7543],[7542,7542],[548,549],[548,548],[550,551],[550,550],[830,831],[830,830],[2967,2968],[2967,2967],[2969,2970],[2969,2969],[3366,3367],[3366,3366],[4198,4199],[4198,4198],[4200,4201],[4200,4200],[4204,4205],[4204,4204],[4461,4462],[4461,4461],[4463,4464],[4463,4463],[4467,4468],[4467,4467],[7542,7543],[7542,7542],[548,549],[548,548],[550,551],[550,550]]