{"ast":null,"code":"export default class Calculation {\n  constructor(expression) {\n    this.expression = expression;\n  }\n\n  validateInput() {\n    // validate expression first (only based on characters)\n    const validExpression = /^[0-9.+\\-*/\\s]+$/; // Regular expression to match valid characters\n\n    console.log(\"expression is \" + this.expression);\n    return validExpression.test(this.expression);\n  }\n\n  evaluate() {\n    if (!this.validateInput()) return undefined; // split into array\n\n    const splitExpression = this.expression.match(/(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-)/g);\n    console.log(splitExpression);\n    const expressionString = splitExpression.join(\" \");\n    console.log(\"expression String\" + expressionString); // Punkt vor Strich\n    // find all * or /, evaluate from left to right\n\n    let isError = false;\n\n    for (let index = 0; index < splitExpression.length; index++) {\n      const element = splitExpression[index];\n\n      if (element === \"*\" || element === \"/\") {\n        const a = parseFloat(splitExpression[index - 1]);\n        const b = parseFloat(splitExpression[index + 1]);\n\n        if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n          isError = true;\n          break;\n        }\n\n        let result = 0;\n\n        if (element === \"*\") {\n          result = a * b;\n        }\n\n        if (element === \"/\") {\n          result = a / b;\n        }\n\n        splitExpression.splice(index - 1, 3, result.toString());\n        index -= 2; // Adjust the index after modifying the array\n      }\n    } // find all + or -, evaluate from left to right\n\n\n    for (let index = 0; index < splitExpression.length; index++) {\n      const element = splitExpression[index];\n\n      if (element === \"+\" || element === \"-\") {\n        const a = parseFloat(splitExpression[index - 1]);\n        const b = parseFloat(splitExpression[index + 1]);\n\n        if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n          isError = true;\n          break;\n        }\n\n        let result = 0;\n\n        if (element === \"-\") {\n          result = a - b;\n        }\n\n        if (element === \"+\") {\n          result = a + b;\n        }\n\n        splitExpression.splice(index - 1, 3, result.toString());\n        index -= 2; // Adjust the index after modifying the array\n      }\n    }\n\n    if (isError) return undefined;\n    return expressionString + \" = \" + parseFloat(splitExpression[0]);\n  }\n\n  calculate() {\n    /**\n     * @TODO Add your implementaiton here\n     */\n    console.log(\"calculate is being called\");\n    return this.evaluate();\n  }\n\n}","map":{"version":3,"sources":["/home/karin/Dokumente/Uni/SS23/React/IT Design/java-script-react-karin-haslauer/src/logic/calculation.js"],"names":["Calculation","constructor","expression","validateInput","validExpression","console","log","test","evaluate","undefined","splitExpression","match","expressionString","join","isError","index","length","element","a","parseFloat","b","isNaN","isFinite","result","splice","toString","calculate"],"mappings":"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","sourcesContent":["export default class Calculation {\n    constructor(expression) {\n        this.expression = expression;\n    }\n\n    validateInput() {\n        // validate expression first (only based on characters)\n        const validExpression = /^[0-9.+\\-*/\\s]+$/; // Regular expression to match valid characters\n        console.log(\"expression is \"+ this.expression);\n        return validExpression.test(this.expression);\n    }\n\n    evaluate() {\n        if(!this.validateInput()) return undefined;\n\n        // split into array\n        const splitExpression = this.expression.match(/(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-)/g);\n        console.log(splitExpression)\n        const expressionString = splitExpression.join(\" \")\n        console.log(\"expression String\" + expressionString);\n\n        // Punkt vor Strich\n        // find all * or /, evaluate from left to right\n        let isError = false;\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"*\" || element === \"/\") {\n            const a = parseFloat(splitExpression[index - 1]);\n            const b = parseFloat(splitExpression[index + 1]);\n        \n            if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                isError = true;\n                break;\n            }\n        \n            let result = 0;\n        \n            if (element === \"*\") {\n                result = a * b;\n            }\n        \n            if (element === \"/\") {\n                result = a / b;\n            }\n        \n            splitExpression.splice(index - 1, 3, result.toString());\n            index -= 2; // Adjust the index after modifying the array\n            }\n        }\n        \n        // find all + or -, evaluate from left to right\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"+\" || element === \"-\") {\n            const a = parseFloat(splitExpression[index - 1]);\n            const b = parseFloat(splitExpression[index + 1]);\n        \n            if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                isError = true;\n                break;\n            }\n        \n            let result = 0;\n        \n            if (element === \"-\") {\n                result = a - b;\n            }\n        \n            if (element === \"+\") {\n                result = a + b;\n            }\n        \n            splitExpression.splice(index - 1, 3, result.toString());\n            index -= 2; // Adjust the index after modifying the array\n            }\n      }\n    \n      if (isError) return undefined;\n      return expressionString + \" = \" + parseFloat(splitExpression[0]);\n\n    }\n\n    calculate() {\n        /**\n         * @TODO Add your implementaiton here\n         */\n        console.log(\"calculate is being called\");\n        return this.evaluate();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}