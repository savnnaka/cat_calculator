{"version":3,"sources":["components/cat_logo.png","components/Layout.jsx","components/ExpressionInput.jsx","components/Results.jsx","logic/calculation.js","App.jsx","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","container","marginTop","logoWrapper","flexGrow","alignItems","display","myTheme","createMuiTheme","palette","primary","main","Layout","children","classes","ThemeProvider","theme","CssBaseline","AppBar","position","color","Toolbar","className","src","logo","width","alt","Container","data-testid","maxWidth","Grid","spacing","item","xs","Typography","variant","map","child","index","ExpressionInput","handleSubmit","useState","isInputValid","setIsInputValid","Card","CardContent","TextField","fullWidth","label","error","id","onChange","event","test","target","value","CardActions","Button","onClick","document","getElementById","Results","result","history","deleteHistory","List","calculation","ListItem","disabled","length","Calculation","expression","this","console","log","validateInput_basic","splitExpression","match","expressionString","join","isError","element","a","parseFloat","b","isNaN","isFinite","performOperation","splice","toString","stack","queue","association","precedence","forEach","push","top","pop","operator","Math","pow","Error","postfix","numbers","evaluatePostfix","infixToPostfix","App","setResult","stateHistory","setStateHistory","calculateResult","useCallback","input","prevResult","prevStateHistory","currentResult","calculate","parseInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.06534605.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cat_logo.8ae0ab05.png\";","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport makeStyles from \"@material-ui/styles/makeStyles\";\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport { createMuiTheme } from \"@material-ui/core/styles/\";\n\nimport logo from \"./cat_logo.png\";\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginTop: 25,\n  },\n  logoWrapper: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    display: \"flex\",\n  },\n}));\n\nconst myTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#a71417\",\n    },\n  },\n});\n\nexport const Layout = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={myTheme}>\n      <CssBaseline />\n      <AppBar position=\"static\" color=\"transparent\">\n        <Toolbar>\n          <div className={classes.logoWrapper}>\n            <img src={logo} width={30} alt=\"my logo\" />\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Container\n        data-testid=\"layout\"\n        maxWidth=\"sm\"\n        className={classes.container}\n      >\n        <Grid spacing={2} container>\n          <Grid item xs={12}>\n            <Typography variant=\"h3\">Cat Calculator</Typography>\n          </Grid>\n          {children.map((child, index) => (\n            <Grid item xs={12} key={index}>\n              {child}\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n","import { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport const ExpressionInput = ({ handleSubmit }) => {\n\n  const [isInputValid, setIsInputValid] = useState(true);\n\n  const handleInputChange = (event) => {\n    // set is input valid according to it's characters only\n    const validExpression = /^[0-9.+\\-*/\\(\\)^\\s]+$/;\n    setIsInputValid(validExpression.test(event.target.value));\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <TextField \n          fullWidth={true} \n          label=\"Expression\" \n          variant=\"outlined\"\n          error={!isInputValid}\n          id=\"inputValue\" \n          onChange={handleInputChange}\n          />\n      </CardContent>\n      <CardActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => handleSubmit(\n            document.getElementById(\"inputValue\").value\n          )}\n        >\n          Submit\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { List, ListItem, Button } from \"@material-ui/core\";\n\nexport const Results = ({result, history, deleteHistory}) => (\n  <Card data-testid=\"results\">\n    <CardContent>\n      <Typography variant=\"h5\">Result</Typography>\n      <Typography variant=\"h6\">{result}</Typography>\n    </CardContent>\n    <CardContent>\n      <Typography variant=\"h5\">History</Typography>\n      <List>\n      {history.map((calculation, index) => (\n        <ListItem key={index}>\n          <Typography>{calculation}</Typography>\n        </ListItem>\n      ))}\n      </List>\n      <Button \n        color=\"primary\"\n        variant=\"contained\"\n        disabled={history.length < 1}\n        onClick={deleteHistory}\n        >\n        Delete History\n      </Button>\n    </CardContent>\n  </Card>\n);\n","export default class Calculation {\n    constructor(expression) {\n        this.expression = expression;\n    }\n\n    /**\n     * validate expression string against regex expression\n     * (only based on characters: digits, *,+,/,-)\n     * @returns bool\n     */\n    validateInput_basic() {\n        const validExpression = /^[0-9.+\\-*/\\s]+$/; // Regular expression to match valid characters\n        console.log(\"expression is \"+ this.expression);\n        return validExpression.test(this.expression);\n    }\n\n    /**\n     * basic evaluation of expression (only based on characters: digits, *,+,/,-)\n     * @returns {float} (result) // string\n     */\n    evaluate_basic() {\n        if(!this.validateInput_basic()) return undefined;\n\n        // split into array\n        const splitExpression = this.expression.match(/(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-)/g);\n        const expressionString = splitExpression.join(\" \")\n\n        // Punkt vor Strich\n        // find all * or /, evaluate from left to right\n        let isError = false;\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"*\" || element === \"/\") {\n                // take neighbours of operator\n                const a = parseFloat(splitExpression[index - 1]);\n                const b = parseFloat(splitExpression[index + 1]);\n            \n                if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                    isError = true;\n                    break;\n                }\n            \n                let result = this.performOperation(element, a, b);\n            \n                splitExpression.splice(index - 1, 3, result.toString());\n                index -= 2; // adjust index, as b is already processed\n            }\n        }\n        \n        // find all + or -, evaluate from left to right\n        for (let index = 0; index < splitExpression.length; index++) {\n            const element = splitExpression[index];\n        \n            if (element === \"+\" || element === \"-\") {\n                const a = parseFloat(splitExpression[index - 1]);\n                const b = parseFloat(splitExpression[index + 1]);\n        \n                if (isNaN(a) || isNaN(b) || !isFinite(a) || !isFinite(b)) {\n                    isError = true;\n                    break;\n                }\n            \n                let result = this.performOperation(element, a, b);\n            \n                splitExpression.splice(index - 1, 3, result.toString());\n                index -= 2; // adjust index, as b is already processed\n            }\n      }\n    \n      if (isError) return undefined;\n      return expressionString + \" = \" + parseFloat(splitExpression[0]);\n    }\n\n    /**\n     * validate expression string against regex expression\n     * (only based on characters: digits, *,+,/,-,(,),^) \n     * @returns {bool}\n     */\n    validateInput_advanced() {\n        const validExpression = /^[0-9.+\\-*/\\(\\)^\\s]+$/; // Regular expression to match valid characters\n        // console.log(\"expression is \"+ this.expression);\n        return validExpression.test(this.expression);\n    }\n\n    /**\n     * converts infix into postfix notation\n     * @param {string} infix \n     * @returns {array} \n     */\n    infixToPostfix(){\n\n        // split string into array\n        const regex = /(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-|\\^|\\(|\\))/g;\n        const splitExpression = this.expression.match(regex);\n\n        if(!splitExpression) return undefined;\n\n        // stack for operators\n        const stack = [];\n        // queue for numbers\n        const queue = [];\n\n        const association = {\n            \"^\" : \"right\",\n            \"*\" : \"left\",\n            \"/\" : \"left\",\n            \"+\" : \"left\",\n            \"-\" : \"left\",\n        };\n\n        var precedence = {\n            \"^\" : 4,\n            \"*\" : 3,\n            \"/\" : 3,\n            \"+\" : 2,\n            \"-\" : 2,\n        };\n\n        splitExpression.forEach(element => {\n            // push all digits on queue\n            if(element.match(/\\d+/)){\n                queue.push(element);\n            }\n            // elseif element is an operator (not a parenthesis)\n            else if(element.match(/[\\+\\*\\-\\/^]/)){\n                // while there's at least one operator on the stack, compare to current operator\n                // to determine the order\n                let top = stack[stack.length - 1];\n                while(top \n                && top.match(/[\\+\\*\\-\\/^]/) // no parenthesis\n                && ((association[element] === \"left\" && precedence[element] === precedence[top])\n                || (precedence[element] < precedence[top]))){\n                    queue.push(stack.pop());\n                    top = stack[stack.length - 1];\n                }\n                stack.push(element);\n            }\n\n            // push left parenthesis it onto the stack.\n            else if(element === \"(\") {\n                stack.push(element);\n            }\n            // element is a right parenthesis:\n            else if(element === \")\") {\n                let top = stack[stack.length - 1];\n                // while the operator at the top of the operator stack is not a left parenthesis\n                while(top && top !== \"(\"){\n                    // pop the operator from the operator stack into the output queue\n                    queue.push(stack.pop());\n                    top = stack[stack.length - 1];\n                }\n                // assert the operator stack is not empty\n                if(!top){\n                    console.log(\"Parentheses mismatch\");\n                    return undefined;\n                }\n                if(top === \"(\"){\n                    stack.pop(); // Discard left parenthesis\n                }\n            }\n        });\n\n        // After the while loop, pop the remaining items from the operator stack into the output queue.\n        while(stack.length !== 0){\n            let top = stack[stack.length - 1];\n            if(top === \"(\" || top === \")\"){\n                console.log(\"Parentheses mismatch\");\n                return undefined;\n            }\n            queue.push(stack.pop());\n        }\n\n        return queue;\n    };\n\n    /**\n     * \n     * @param operator \n     * @param {float} a \n     * @param {float} b \n     * @returns {float} result\n     */\n    performOperation(operator, a, b) {\n        switch (operator) {\n        case '+':\n            return a + b;\n        case '-':\n            return a - b;\n        case '*':\n            return a * b;\n        case '/':\n            return a / b;\n        case '^':\n            return Math.pow(a, b);\n        default:\n            throw new Error('Invalid operator: ' + operator);\n        }\n    }\n\n    evaluatePostfix(postfix) {\n        // return if postfix is undefined\n        if(!postfix) return undefined;\n        // stack for the digits\n        const numbers = [];\n      \n        postfix.forEach(element => {\n            if (!isNaN(parseFloat(element)) && isFinite(element)) {\n              numbers.push(parseFloat(element));\n            } else {\n              let b = numbers.pop();\n              let a = numbers.pop();\n              let result = this.performOperation(element, a, b);\n              numbers.push(result);\n            }\n        });\n      \n        if(isNaN(numbers[0])) return undefined;\n        return numbers[0];\n    }\n\n    /**\n     * @param {string} expression \n     * @returns {string} parsedExpression \n     */\n    parseInput(){\n        // split string into array\n        const regex = /(\\d+(\\.\\d+)?|\\*|\\/|\\+|\\-|\\^|\\(|\\))/g;\n        const inputSplitted = this.expression.match(regex);\n        return inputSplitted.join(\" \");\n    }\n\n\n    /**\n     * calls the specified evaluation method\n     * @returns float (result of expression)\n     */\n    calculate() {\n        /**\n         * @TODO Add your implementation here\n         */\n        return this.evaluatePostfix(this.infixToPostfix());\n    }\n}\n","import { useState, useCallback } from \"react\";\nimport { Layout } from \"./components/Layout\";\nimport { ExpressionInput } from \"./components/ExpressionInput\";\nimport { Results } from \"./components/Results\";\nimport Calculation from \"./logic/calculation\";\n\nexport const App = () => {\n  const [result, setResult] = useState(\"\");\n  const [stateHistory, setStateHistory] = useState([]);\n\n  const deleteHistory = () => {\n    setStateHistory([]);\n  }\n\n  const calculateResult = useCallback(\n    (input) => {\n      setResult((prevResult) => {\n        // update stateHistory to save prevResult (only if input was valid)\n        setStateHistory((prevStateHistory => {\n          if(prevResult === \"Wrong input!\") return prevStateHistory;\n          return [prevResult, ...prevStateHistory];\n        }));\n        // return calculation of current input\n        let calculation = new Calculation(input);\n        let currentResult = calculation.calculate();\n        return currentResult ?  calculation.parseInput() + \" = \" + currentResult : \"Wrong input!\";\n      });\n    },\n    [setResult]\n  );\n\n  return (\n    <Layout>\n      <ExpressionInput handleSubmit={calculateResult} />\n      <Results result={result} history={stateHistory} deleteHistory={deleteHistory} />\n    </Layout>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}